// Code generated by ent, DO NOT EDIT.

package submit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/server/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldURL, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldScore, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldMessage, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldStatus, v))
}

// TaskNum applies equality check predicate on the "task_num" field. It's identical to TaskNumEQ.
func TaskNum(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldTaskNum, v))
}

// SubmitedAt applies equality check predicate on the "submited_at" field. It's identical to SubmitedAtEQ.
func SubmitedAt(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldSubmitedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCompletedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldUpdatedAt, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContainsFold(FieldURL, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldScore))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v Language) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v Language) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...Language) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...Language) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldLanguage))
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldLanguage))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContainsFold(FieldMessage, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContainsFold(FieldStatus, v))
}

// TaskNumEQ applies the EQ predicate on the "task_num" field.
func TaskNumEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldTaskNum, v))
}

// TaskNumNEQ applies the NEQ predicate on the "task_num" field.
func TaskNumNEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldTaskNum, v))
}

// TaskNumIn applies the In predicate on the "task_num" field.
func TaskNumIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldTaskNum, vs...))
}

// TaskNumNotIn applies the NotIn predicate on the "task_num" field.
func TaskNumNotIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldTaskNum, vs...))
}

// TaskNumGT applies the GT predicate on the "task_num" field.
func TaskNumGT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldTaskNum, v))
}

// TaskNumGTE applies the GTE predicate on the "task_num" field.
func TaskNumGTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldTaskNum, v))
}

// TaskNumLT applies the LT predicate on the "task_num" field.
func TaskNumLT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldTaskNum, v))
}

// TaskNumLTE applies the LTE predicate on the "task_num" field.
func TaskNumLTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldTaskNum, v))
}

// SubmitedAtEQ applies the EQ predicate on the "submited_at" field.
func SubmitedAtEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldSubmitedAt, v))
}

// SubmitedAtNEQ applies the NEQ predicate on the "submited_at" field.
func SubmitedAtNEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldSubmitedAt, v))
}

// SubmitedAtIn applies the In predicate on the "submited_at" field.
func SubmitedAtIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldSubmitedAt, vs...))
}

// SubmitedAtNotIn applies the NotIn predicate on the "submited_at" field.
func SubmitedAtNotIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldSubmitedAt, vs...))
}

// SubmitedAtGT applies the GT predicate on the "submited_at" field.
func SubmitedAtGT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldSubmitedAt, v))
}

// SubmitedAtGTE applies the GTE predicate on the "submited_at" field.
func SubmitedAtGTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldSubmitedAt, v))
}

// SubmitedAtLT applies the LT predicate on the "submited_at" field.
func SubmitedAtLT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldSubmitedAt, v))
}

// SubmitedAtLTE applies the LTE predicate on the "submited_at" field.
func SubmitedAtLTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldSubmitedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldCompletedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldUpdatedAt))
}

// HasTaskResults applies the HasEdge predicate on the "taskResults" edge.
func HasTaskResults() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskResultsTable, TaskResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskResultsWith applies the HasEdge predicate on the "taskResults" edge with a given conditions (other predicates).
func HasTaskResultsWith(preds ...predicate.TaskResult) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newTaskResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContests applies the HasEdge predicate on the "contests" edge.
func HasContests() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContestsTable, ContestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContestsWith applies the HasEdge predicate on the "contests" edge with a given conditions (other predicates).
func HasContestsWith(preds ...predicate.Contest) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newContestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Submit) predicate.Submit {
	return predicate.Submit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Submit) predicate.Submit {
	return predicate.Submit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Submit) predicate.Submit {
	return predicate.Submit(sql.NotPredicates(p))
}
