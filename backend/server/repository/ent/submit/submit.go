// Code generated by ent, DO NOT EDIT.

package submit

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the submit type in the database.
	Label = "submit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTaskNum holds the string denoting the task_num field in the database.
	FieldTaskNum = "task_num"
	// FieldSubmitedAt holds the string denoting the submited_at field in the database.
	FieldSubmitedAt = "submited_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTaskResults holds the string denoting the taskresults edge name in mutations.
	EdgeTaskResults = "taskResults"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeContests holds the string denoting the contests edge name in mutations.
	EdgeContests = "contests"
	// Table holds the table name of the submit in the database.
	Table = "submits"
	// TaskResultsTable is the table that holds the taskResults relation/edge.
	TaskResultsTable = "task_results"
	// TaskResultsInverseTable is the table name for the TaskResult entity.
	// It exists in this package in order to avoid circular dependency with the "taskresult" package.
	TaskResultsInverseTable = "task_results"
	// TaskResultsColumn is the table column denoting the taskResults relation/edge.
	TaskResultsColumn = "submit_task_results"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "submits"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "group_submits"
	// ContestsTable is the table that holds the contests relation/edge.
	ContestsTable = "submits"
	// ContestsInverseTable is the table name for the Contest entity.
	// It exists in this package in order to avoid circular dependency with the "contest" package.
	ContestsInverseTable = "contests"
	// ContestsColumn is the table column denoting the contests relation/edge.
	ContestsColumn = "contest_submits"
)

// Columns holds all SQL columns for submit fields.
var Columns = []string{
	FieldID,
	FieldURL,
	FieldScore,
	FieldLanguage,
	FieldMessage,
	FieldStatus,
	FieldTaskNum,
	FieldSubmitedAt,
	FieldCompletedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "submits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"contest_submits",
	"group_submits",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Language defines the type for the "language" enum field.
type Language string

// Language values.
const (
	LanguagePhp        Language = "php"
	LanguageGo         Language = "go"
	LanguageRust       Language = "rust"
	LanguageJavascript Language = "javascript"
	LanguageCsharp     Language = "csharp"
	LanguageCpp        Language = "cpp"
	LanguageRuby       Language = "ruby"
	LanguagePython     Language = "python"
)

func (l Language) String() string {
	return string(l)
}

// LanguageValidator is a validator for the "language" field enum values. It is called by the builders before save.
func LanguageValidator(l Language) error {
	switch l {
	case LanguagePhp, LanguageGo, LanguageRust, LanguageJavascript, LanguageCsharp, LanguageCpp, LanguageRuby, LanguagePython:
		return nil
	default:
		return fmt.Errorf("submit: invalid enum value for language field: %q", l)
	}
}

// OrderOption defines the ordering options for the Submit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTaskNum orders the results by the task_num field.
func ByTaskNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskNum, opts...).ToFunc()
}

// BySubmitedAt orders the results by the submited_at field.
func BySubmitedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmitedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTaskResultsCount orders the results by taskResults count.
func ByTaskResultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskResultsStep(), opts...)
	}
}

// ByTaskResults orders the results by taskResults terms.
func ByTaskResults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsField orders the results by groups field.
func ByGroupsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), sql.OrderByField(field, opts...))
	}
}

// ByContestsField orders the results by contests field.
func ByContestsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContestsStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskResultsTable, TaskResultsColumn),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GroupsTable, GroupsColumn),
	)
}
func newContestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContestsTable, ContestsColumn),
	)
}
