// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/server/repository/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/server/repository/ent/contest"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/server/repository/ent/group"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/server/repository/ent/submit"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/server/repository/ent/taskresult"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Contest is the client for interacting with the Contest builders.
	Contest *ContestClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// Submit is the client for interacting with the Submit builders.
	Submit *SubmitClient
	// TaskResult is the client for interacting with the TaskResult builders.
	TaskResult *TaskResultClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Contest = NewContestClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.Submit = NewSubmitClient(c.config)
	c.TaskResult = NewTaskResultClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Contest:    NewContestClient(cfg),
		Group:      NewGroupClient(cfg),
		Submit:     NewSubmitClient(cfg),
		TaskResult: NewTaskResultClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Contest:    NewContestClient(cfg),
		Group:      NewGroupClient(cfg),
		Submit:     NewSubmitClient(cfg),
		TaskResult: NewTaskResultClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Contest.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Contest.Use(hooks...)
	c.Group.Use(hooks...)
	c.Submit.Use(hooks...)
	c.TaskResult.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Contest.Intercept(interceptors...)
	c.Group.Intercept(interceptors...)
	c.Submit.Intercept(interceptors...)
	c.TaskResult.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ContestMutation:
		return c.Contest.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *SubmitMutation:
		return c.Submit.mutate(ctx, m)
	case *TaskResultMutation:
		return c.TaskResult.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ContestClient is a client for the Contest schema.
type ContestClient struct {
	config
}

// NewContestClient returns a client for the Contest from the given config.
func NewContestClient(c config) *ContestClient {
	return &ContestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contest.Hooks(f(g(h())))`.
func (c *ContestClient) Use(hooks ...Hook) {
	c.hooks.Contest = append(c.hooks.Contest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contest.Intercept(f(g(h())))`.
func (c *ContestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contest = append(c.inters.Contest, interceptors...)
}

// Create returns a builder for creating a Contest entity.
func (c *ContestClient) Create() *ContestCreate {
	mutation := newContestMutation(c.config, OpCreate)
	return &ContestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contest entities.
func (c *ContestClient) CreateBulk(builders ...*ContestCreate) *ContestCreateBulk {
	return &ContestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContestClient) MapCreateBulk(slice any, setFunc func(*ContestCreate, int)) *ContestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContestCreateBulk{err: fmt.Errorf("calling to ContestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contest.
func (c *ContestClient) Update() *ContestUpdate {
	mutation := newContestMutation(c.config, OpUpdate)
	return &ContestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContestClient) UpdateOne(co *Contest) *ContestUpdateOne {
	mutation := newContestMutation(c.config, OpUpdateOne, withContest(co))
	return &ContestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContestClient) UpdateOneID(id int) *ContestUpdateOne {
	mutation := newContestMutation(c.config, OpUpdateOne, withContestID(id))
	return &ContestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contest.
func (c *ContestClient) Delete() *ContestDelete {
	mutation := newContestMutation(c.config, OpDelete)
	return &ContestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContestClient) DeleteOne(co *Contest) *ContestDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContestClient) DeleteOneID(id int) *ContestDeleteOne {
	builder := c.Delete().Where(contest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContestDeleteOne{builder}
}

// Query returns a query builder for Contest.
func (c *ContestClient) Query() *ContestQuery {
	return &ContestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContest},
		inters: c.Interceptors(),
	}
}

// Get returns a Contest entity by its id.
func (c *ContestClient) Get(ctx context.Context, id int) (*Contest, error) {
	return c.Query().Where(contest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContestClient) GetX(ctx context.Context, id int) *Contest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubmits queries the submits edge of a Contest.
func (c *ContestClient) QuerySubmits(co *Contest) *SubmitQuery {
	query := (&SubmitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contest.Table, contest.FieldID, id),
			sqlgraph.To(submit.Table, submit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contest.SubmitsTable, contest.SubmitsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContestClient) Hooks() []Hook {
	return c.hooks.Contest
}

// Interceptors returns the client interceptors.
func (c *ContestClient) Interceptors() []Interceptor {
	return c.inters.Contest
}

func (c *ContestClient) mutate(ctx context.Context, m *ContestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Contest mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupClient) MapCreateBulk(slice any, setFunc func(*GroupCreate, int)) *GroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupCreateBulk{err: fmt.Errorf("calling to GroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id int) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id int) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id int) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id int) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubmits queries the submits edge of a Group.
func (c *GroupClient) QuerySubmits(gr *Group) *SubmitQuery {
	query := (&SubmitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(submit.Table, submit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.SubmitsTable, group.SubmitsColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// SubmitClient is a client for the Submit schema.
type SubmitClient struct {
	config
}

// NewSubmitClient returns a client for the Submit from the given config.
func NewSubmitClient(c config) *SubmitClient {
	return &SubmitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `submit.Hooks(f(g(h())))`.
func (c *SubmitClient) Use(hooks ...Hook) {
	c.hooks.Submit = append(c.hooks.Submit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `submit.Intercept(f(g(h())))`.
func (c *SubmitClient) Intercept(interceptors ...Interceptor) {
	c.inters.Submit = append(c.inters.Submit, interceptors...)
}

// Create returns a builder for creating a Submit entity.
func (c *SubmitClient) Create() *SubmitCreate {
	mutation := newSubmitMutation(c.config, OpCreate)
	return &SubmitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Submit entities.
func (c *SubmitClient) CreateBulk(builders ...*SubmitCreate) *SubmitCreateBulk {
	return &SubmitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubmitClient) MapCreateBulk(slice any, setFunc func(*SubmitCreate, int)) *SubmitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubmitCreateBulk{err: fmt.Errorf("calling to SubmitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubmitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubmitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Submit.
func (c *SubmitClient) Update() *SubmitUpdate {
	mutation := newSubmitMutation(c.config, OpUpdate)
	return &SubmitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubmitClient) UpdateOne(s *Submit) *SubmitUpdateOne {
	mutation := newSubmitMutation(c.config, OpUpdateOne, withSubmit(s))
	return &SubmitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubmitClient) UpdateOneID(id int) *SubmitUpdateOne {
	mutation := newSubmitMutation(c.config, OpUpdateOne, withSubmitID(id))
	return &SubmitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Submit.
func (c *SubmitClient) Delete() *SubmitDelete {
	mutation := newSubmitMutation(c.config, OpDelete)
	return &SubmitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubmitClient) DeleteOne(s *Submit) *SubmitDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubmitClient) DeleteOneID(id int) *SubmitDeleteOne {
	builder := c.Delete().Where(submit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubmitDeleteOne{builder}
}

// Query returns a query builder for Submit.
func (c *SubmitClient) Query() *SubmitQuery {
	return &SubmitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubmit},
		inters: c.Interceptors(),
	}
}

// Get returns a Submit entity by its id.
func (c *SubmitClient) Get(ctx context.Context, id int) (*Submit, error) {
	return c.Query().Where(submit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubmitClient) GetX(ctx context.Context, id int) *Submit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTaskResults queries the taskResults edge of a Submit.
func (c *SubmitClient) QueryTaskResults(s *Submit) *TaskResultQuery {
	query := (&TaskResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(submit.Table, submit.FieldID, id),
			sqlgraph.To(taskresult.Table, taskresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, submit.TaskResultsTable, submit.TaskResultsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a Submit.
func (c *SubmitClient) QueryGroups(s *Submit) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(submit.Table, submit.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, submit.GroupsTable, submit.GroupsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContests queries the contests edge of a Submit.
func (c *SubmitClient) QueryContests(s *Submit) *ContestQuery {
	query := (&ContestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(submit.Table, submit.FieldID, id),
			sqlgraph.To(contest.Table, contest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, submit.ContestsTable, submit.ContestsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubmitClient) Hooks() []Hook {
	return c.hooks.Submit
}

// Interceptors returns the client interceptors.
func (c *SubmitClient) Interceptors() []Interceptor {
	return c.inters.Submit
}

func (c *SubmitClient) mutate(ctx context.Context, m *SubmitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubmitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubmitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubmitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubmitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Submit mutation op: %q", m.Op())
	}
}

// TaskResultClient is a client for the TaskResult schema.
type TaskResultClient struct {
	config
}

// NewTaskResultClient returns a client for the TaskResult from the given config.
func NewTaskResultClient(c config) *TaskResultClient {
	return &TaskResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskresult.Hooks(f(g(h())))`.
func (c *TaskResultClient) Use(hooks ...Hook) {
	c.hooks.TaskResult = append(c.hooks.TaskResult, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `taskresult.Intercept(f(g(h())))`.
func (c *TaskResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.TaskResult = append(c.inters.TaskResult, interceptors...)
}

// Create returns a builder for creating a TaskResult entity.
func (c *TaskResultClient) Create() *TaskResultCreate {
	mutation := newTaskResultMutation(c.config, OpCreate)
	return &TaskResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskResult entities.
func (c *TaskResultClient) CreateBulk(builders ...*TaskResultCreate) *TaskResultCreateBulk {
	return &TaskResultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskResultClient) MapCreateBulk(slice any, setFunc func(*TaskResultCreate, int)) *TaskResultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskResultCreateBulk{err: fmt.Errorf("calling to TaskResultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskResultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskResult.
func (c *TaskResultClient) Update() *TaskResultUpdate {
	mutation := newTaskResultMutation(c.config, OpUpdate)
	return &TaskResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskResultClient) UpdateOne(tr *TaskResult) *TaskResultUpdateOne {
	mutation := newTaskResultMutation(c.config, OpUpdateOne, withTaskResult(tr))
	return &TaskResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskResultClient) UpdateOneID(id int) *TaskResultUpdateOne {
	mutation := newTaskResultMutation(c.config, OpUpdateOne, withTaskResultID(id))
	return &TaskResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskResult.
func (c *TaskResultClient) Delete() *TaskResultDelete {
	mutation := newTaskResultMutation(c.config, OpDelete)
	return &TaskResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskResultClient) DeleteOne(tr *TaskResult) *TaskResultDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskResultClient) DeleteOneID(id int) *TaskResultDeleteOne {
	builder := c.Delete().Where(taskresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskResultDeleteOne{builder}
}

// Query returns a query builder for TaskResult.
func (c *TaskResultClient) Query() *TaskResultQuery {
	return &TaskResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaskResult},
		inters: c.Interceptors(),
	}
}

// Get returns a TaskResult entity by its id.
func (c *TaskResultClient) Get(ctx context.Context, id int) (*TaskResult, error) {
	return c.Query().Where(taskresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskResultClient) GetX(ctx context.Context, id int) *TaskResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubmits queries the submits edge of a TaskResult.
func (c *TaskResultClient) QuerySubmits(tr *TaskResult) *SubmitQuery {
	query := (&SubmitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskresult.Table, taskresult.FieldID, id),
			sqlgraph.To(submit.Table, submit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskresult.SubmitsTable, taskresult.SubmitsColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskResultClient) Hooks() []Hook {
	return c.hooks.TaskResult
}

// Interceptors returns the client interceptors.
func (c *TaskResultClient) Interceptors() []Interceptor {
	return c.inters.TaskResult
}

func (c *TaskResultClient) mutate(ctx context.Context, m *TaskResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TaskResult mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Contest, Group, Submit, TaskResult []ent.Hook
	}
	inters struct {
		Contest, Group, Submit, TaskResult []ent.Interceptor
	}
)
