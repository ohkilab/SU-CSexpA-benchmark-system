// Code generated by ent, DO NOT EDIT.

package taskresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/server/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldID, id))
}

// RequestPerSec applies equality check predicate on the "request_per_sec" field. It's identical to RequestPerSecEQ.
func RequestPerSec(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldRequestPerSec, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldStatus, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldErrorMessage, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldURL, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldMethod, v))
}

// RequestContentType applies equality check predicate on the "request_content_type" field. It's identical to RequestContentTypeEQ.
func RequestContentType(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldRequestContentType, v))
}

// RequestBody applies equality check predicate on the "request_body" field. It's identical to RequestBodyEQ.
func RequestBody(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldRequestBody, v))
}

// ThreadNum applies equality check predicate on the "thread_num" field. It's identical to ThreadNumEQ.
func ThreadNum(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldThreadNum, v))
}

// AttemptCount applies equality check predicate on the "attempt_count" field. It's identical to AttemptCountEQ.
func AttemptCount(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldAttemptCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldDeletedAt, v))
}

// RequestPerSecEQ applies the EQ predicate on the "request_per_sec" field.
func RequestPerSecEQ(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldRequestPerSec, v))
}

// RequestPerSecNEQ applies the NEQ predicate on the "request_per_sec" field.
func RequestPerSecNEQ(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldRequestPerSec, v))
}

// RequestPerSecIn applies the In predicate on the "request_per_sec" field.
func RequestPerSecIn(vs ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldRequestPerSec, vs...))
}

// RequestPerSecNotIn applies the NotIn predicate on the "request_per_sec" field.
func RequestPerSecNotIn(vs ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldRequestPerSec, vs...))
}

// RequestPerSecGT applies the GT predicate on the "request_per_sec" field.
func RequestPerSecGT(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldRequestPerSec, v))
}

// RequestPerSecGTE applies the GTE predicate on the "request_per_sec" field.
func RequestPerSecGTE(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldRequestPerSec, v))
}

// RequestPerSecLT applies the LT predicate on the "request_per_sec" field.
func RequestPerSecLT(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldRequestPerSec, v))
}

// RequestPerSecLTE applies the LTE predicate on the "request_per_sec" field.
func RequestPerSecLTE(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldRequestPerSec, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContainsFold(FieldStatus, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContainsFold(FieldErrorMessage, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContainsFold(FieldURL, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContainsFold(FieldMethod, v))
}

// RequestContentTypeEQ applies the EQ predicate on the "request_content_type" field.
func RequestContentTypeEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldRequestContentType, v))
}

// RequestContentTypeNEQ applies the NEQ predicate on the "request_content_type" field.
func RequestContentTypeNEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldRequestContentType, v))
}

// RequestContentTypeIn applies the In predicate on the "request_content_type" field.
func RequestContentTypeIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldRequestContentType, vs...))
}

// RequestContentTypeNotIn applies the NotIn predicate on the "request_content_type" field.
func RequestContentTypeNotIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldRequestContentType, vs...))
}

// RequestContentTypeGT applies the GT predicate on the "request_content_type" field.
func RequestContentTypeGT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldRequestContentType, v))
}

// RequestContentTypeGTE applies the GTE predicate on the "request_content_type" field.
func RequestContentTypeGTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldRequestContentType, v))
}

// RequestContentTypeLT applies the LT predicate on the "request_content_type" field.
func RequestContentTypeLT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldRequestContentType, v))
}

// RequestContentTypeLTE applies the LTE predicate on the "request_content_type" field.
func RequestContentTypeLTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldRequestContentType, v))
}

// RequestContentTypeContains applies the Contains predicate on the "request_content_type" field.
func RequestContentTypeContains(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContains(FieldRequestContentType, v))
}

// RequestContentTypeHasPrefix applies the HasPrefix predicate on the "request_content_type" field.
func RequestContentTypeHasPrefix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasPrefix(FieldRequestContentType, v))
}

// RequestContentTypeHasSuffix applies the HasSuffix predicate on the "request_content_type" field.
func RequestContentTypeHasSuffix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasSuffix(FieldRequestContentType, v))
}

// RequestContentTypeEqualFold applies the EqualFold predicate on the "request_content_type" field.
func RequestContentTypeEqualFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEqualFold(FieldRequestContentType, v))
}

// RequestContentTypeContainsFold applies the ContainsFold predicate on the "request_content_type" field.
func RequestContentTypeContainsFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContainsFold(FieldRequestContentType, v))
}

// RequestBodyEQ applies the EQ predicate on the "request_body" field.
func RequestBodyEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldRequestBody, v))
}

// RequestBodyNEQ applies the NEQ predicate on the "request_body" field.
func RequestBodyNEQ(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldRequestBody, v))
}

// RequestBodyIn applies the In predicate on the "request_body" field.
func RequestBodyIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldRequestBody, vs...))
}

// RequestBodyNotIn applies the NotIn predicate on the "request_body" field.
func RequestBodyNotIn(vs ...string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldRequestBody, vs...))
}

// RequestBodyGT applies the GT predicate on the "request_body" field.
func RequestBodyGT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldRequestBody, v))
}

// RequestBodyGTE applies the GTE predicate on the "request_body" field.
func RequestBodyGTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldRequestBody, v))
}

// RequestBodyLT applies the LT predicate on the "request_body" field.
func RequestBodyLT(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldRequestBody, v))
}

// RequestBodyLTE applies the LTE predicate on the "request_body" field.
func RequestBodyLTE(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldRequestBody, v))
}

// RequestBodyContains applies the Contains predicate on the "request_body" field.
func RequestBodyContains(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContains(FieldRequestBody, v))
}

// RequestBodyHasPrefix applies the HasPrefix predicate on the "request_body" field.
func RequestBodyHasPrefix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasPrefix(FieldRequestBody, v))
}

// RequestBodyHasSuffix applies the HasSuffix predicate on the "request_body" field.
func RequestBodyHasSuffix(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldHasSuffix(FieldRequestBody, v))
}

// RequestBodyIsNil applies the IsNil predicate on the "request_body" field.
func RequestBodyIsNil() predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIsNull(FieldRequestBody))
}

// RequestBodyNotNil applies the NotNil predicate on the "request_body" field.
func RequestBodyNotNil() predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotNull(FieldRequestBody))
}

// RequestBodyEqualFold applies the EqualFold predicate on the "request_body" field.
func RequestBodyEqualFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEqualFold(FieldRequestBody, v))
}

// RequestBodyContainsFold applies the ContainsFold predicate on the "request_body" field.
func RequestBodyContainsFold(v string) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldContainsFold(FieldRequestBody, v))
}

// ThreadNumEQ applies the EQ predicate on the "thread_num" field.
func ThreadNumEQ(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldThreadNum, v))
}

// ThreadNumNEQ applies the NEQ predicate on the "thread_num" field.
func ThreadNumNEQ(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldThreadNum, v))
}

// ThreadNumIn applies the In predicate on the "thread_num" field.
func ThreadNumIn(vs ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldThreadNum, vs...))
}

// ThreadNumNotIn applies the NotIn predicate on the "thread_num" field.
func ThreadNumNotIn(vs ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldThreadNum, vs...))
}

// ThreadNumGT applies the GT predicate on the "thread_num" field.
func ThreadNumGT(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldThreadNum, v))
}

// ThreadNumGTE applies the GTE predicate on the "thread_num" field.
func ThreadNumGTE(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldThreadNum, v))
}

// ThreadNumLT applies the LT predicate on the "thread_num" field.
func ThreadNumLT(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldThreadNum, v))
}

// ThreadNumLTE applies the LTE predicate on the "thread_num" field.
func ThreadNumLTE(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldThreadNum, v))
}

// AttemptCountEQ applies the EQ predicate on the "attempt_count" field.
func AttemptCountEQ(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldAttemptCount, v))
}

// AttemptCountNEQ applies the NEQ predicate on the "attempt_count" field.
func AttemptCountNEQ(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldAttemptCount, v))
}

// AttemptCountIn applies the In predicate on the "attempt_count" field.
func AttemptCountIn(vs ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldAttemptCount, vs...))
}

// AttemptCountNotIn applies the NotIn predicate on the "attempt_count" field.
func AttemptCountNotIn(vs ...int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldAttemptCount, vs...))
}

// AttemptCountGT applies the GT predicate on the "attempt_count" field.
func AttemptCountGT(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldAttemptCount, v))
}

// AttemptCountGTE applies the GTE predicate on the "attempt_count" field.
func AttemptCountGTE(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldAttemptCount, v))
}

// AttemptCountLT applies the LT predicate on the "attempt_count" field.
func AttemptCountLT(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldAttemptCount, v))
}

// AttemptCountLTE applies the LTE predicate on the "attempt_count" field.
func AttemptCountLTE(v int) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldAttemptCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TaskResult {
	return predicate.TaskResult(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TaskResult {
	return predicate.TaskResult(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TaskResult {
	return predicate.TaskResult(sql.FieldNotNull(FieldDeletedAt))
}

// HasSubmits applies the HasEdge predicate on the "submits" edge.
func HasSubmits() predicate.TaskResult {
	return predicate.TaskResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubmitsTable, SubmitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubmitsWith applies the HasEdge predicate on the "submits" edge with a given conditions (other predicates).
func HasSubmitsWith(preds ...predicate.Submit) predicate.TaskResult {
	return predicate.TaskResult(func(s *sql.Selector) {
		step := newSubmitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskResult) predicate.TaskResult {
	return predicate.TaskResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskResult) predicate.TaskResult {
	return predicate.TaskResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskResult) predicate.TaskResult {
	return predicate.TaskResult(sql.NotPredicates(p))
}
